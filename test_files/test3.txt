== Software testing with fuzzing ==

Software testing with fuzzing attempts to uncover mistakes that were not detected by other testing. Fuzzing is used to find errors in file handling and message parsing.


== Fuzzing works! Example with RADAMSA ==

Smart random testing, which fuzzing can also be called, works! Mistakes are uncovered there were there should be none, and once again we are forced to admit, that software engineering has failed to produce infallible programs. Here's an example:

8 small computers running automated tests using the RADAMSA fuzzer uncovered the following problems from a widely used program in just two days:

The first number represents the number of times this particular problem has come up, and the letter in brackets is substitute for the program path.

{{{
     91 crashed on unknown address 0x000000000010 (I)
     64 crashed on unknown address 0xffffffffffffffff (Q)
     28 crashed on unknown address 0x0000bbadbeef (N)
     14 memcpy-param-overlap: memory ranges
[0x7f0793750081,0x7f07937500b1) and [0x7f07937500b0, 0x7f07937500e0)
overlap (V)
     14 crashed on unknown address 0x0000bbadbeef (O)
      8 heap-buffer-overflow on address 0x7f47b737ba80 at pc
0x7f47c5aea5b6 bp 0x7f47b47ff7f0 sp 0x7f47b47ff7e8 (R)
      4 heap-use-after-free on address 0x7f73042b36c8 at pc 0x512b7fa bp
0x7fff08fb8fc0 sp 0x7fff08fb8fb8 (U)
      4 crashed on unknown address 0x000000000000 (F)
      3 crashed on unknown address 0x000000000024 (J)
      2 crashed on unknown address 0x0000bbadbeef (M)
      2 crashed on unknown address 0x000000000000 (G)
      2 crashed on unknown address 0x000000000000 (D)
      2 crashed on unknown address 0x000000000000 (B)
      1 heap-use-after-free on address 0x7f668a993680 at pc 0x6cae09a bp
0x7f6686ed3970 sp 0x7f6686ed3968 (T)
      1 heap-buffer-overflow on address 0x7f4e3888f680 at pc 0x20aa077 bp
0x7fff9aa44890 sp 0x7fff9aa44888 (S)
      1 crashed on unknown address 0x7fe4094772e0 (P)
      1 crashed on unknown address 0x0000000001d8 (L)
      1 crashed on unknown address 0x000000000048 (K)
      1 crashed on unknown address 0x000000000010 (H)
      1 crashed on unknown address 0x000000000000 (E)
      1 crashed on unknown address 0x000000000000 (C)
      1 crashed on unknown address 0x000000000000 (A)
}}}

Other typical bug types, that did not appear in tese tests include
 
 * Stack use after return
 * Global buffer overflow

== How does it work? ==

Now, if we conceed that fuzzing in fact works, the next question is, how does it do that.

Fuzzing works by taking a '''sample''' set of valid input, whether it is protocol messages or files, and then performing a number of more or less random activities that result in corrupted, or '''fuzzed''' inputs. Those inputs are then fed to the program in question to see, whether the small changes that were made, happen to break the program.

Individual fuzzers have different ways to perform the '''fuzzing''', or the production of the corrupted input files. Techniques range from simple bit-flipping (changing individual bits randomly from 0 to 1 or vice versa) to complicated modelling of the original input and making clever changes, substitutions and deletions.